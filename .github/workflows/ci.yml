name: Continuous Integration

on:
  push:
    branches:
    - master

  pull_request:
    branches:
    - master

jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build -j 2

    - name: Test
      working-directory: build
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        PS4: "\e[36m+++\e[0m "
      run: |
        set -x
        ctest --output-on-failure
        lcov -c -d .. -o coverage.info --include '${{ github.workspace }}/*'
        lcov --list coverage.info
        bash <(curl -s https://codecov.io/bash) -f coverage.info

  sanitize:
    name: sanitize (${{ matrix.name }})

    strategy:
      fail-fast: false

      matrix:
        name: [address, undefined, memory]

        include:
        - name: address
          flags: -fno-common
          options: "{ \"ASAN_OPTIONS\": \"\
            strict_string_checks=1:\
            detect_stack_use_after_return=1:\
            check_initialization_order=1:\
            strict_init_order=1:\
            detect_leaks=1\" }"

        - name: undefined
          options: '{ "UBSAN_OPTIONS": "print_stacktrace=1" }'

        - name: memory
          flags: -fsanitize-memory-track-origins=2

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Configure
      env:
        SANITIZER: ${{ matrix.name }}
        EXTRA_FLAGS: ${{ matrix.flags }}
        CXX: clang++-11
      run: cmake --preset=ci-sanitizer

    - name: Build
      run: cmake --build build -j 2

    - name: Add LLVM tools to PATH
      run: echo /usr/lib/llvm-11/bin >> "$GITHUB_PATH"

    - name: Test
      working-directory: build
      env: ${{ fromJSON(matrix.options || '{}') }}
      run: ctest --output-on-failure

  test:
    strategy:
      matrix:
        os: [macos, ubuntu, windows]

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1

    - name: Install static analyzers
      if: matrix.os == 'ubuntu'
      run: sudo apt-get install clang-tidy cppcheck -y -q

    - name: Configure
      run: cmake --preset=ci-${{ matrix.os }}

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: build
      run: ctest -C Release -j 2
